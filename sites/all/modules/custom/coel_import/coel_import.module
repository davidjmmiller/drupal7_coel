<?php

/**
 * @file
 * Module file for page_example_module.
 */

/**
 * @defgroup page_example Example: Page
 * @ingroup examples
 * @{
 * This example demonstrates how a module can display a page at a given URL.
 *
 * It's important to understand how the menu system works in order to
 * implement your own pages. See the Menu Example module for some insight.
 *
 * @see menu_example
 */

/**
 * Implements hook_help().
 *
 * Through hook_help(), a module can make documentation available to the user
 * for the module as a whole or for specific paths. Where the help appears
 * depends on the $path specified.
 *
 * In the first example below, the help text will appear on the simple page
 * defined in hook_menu below in the region designated for help text.
 *
 * In the second example, the text will be available through the module page as
 * a link beside the module or on the admin help page (admin/help) in the list
 * of help topics using the name of the module. To specify help in the admin
 * section use the module name in the path as in the second case below.
 *
 * @see hook_help()
 */
function coel_import_help($path, $arg) {
  switch ($path) {
    case 'examples/page_example/simple':
      // Help text for the simple page registered for this path.
      return t('This is help text for the simple page.');

    case 'admin/help#page_example':
      // Help text for the admin section, using the module name in the path.
      return t("This is help text created in the page example's second case.");
  }
}

/**
 * Implements hook_permission().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function coel_import_permission() {
  return array(
    'access simple page' => array(
      'title' => t('Access simple page'),
      'description' => t('Allow users to access simple page'),
    ),
    'access arguments page' => array(
      'title' => t('Access page with arguments'),
      'description' => t('Allow users to access page with arguments'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Because hook_menu() registers URL paths for items defined by the function, it
 * is necessary for modules that create pages. Each item can also specify a
 * callback function for a given URL. The menu items returned here provide this
 * information to the menu system.
 *
 * We will define some menus, and their paths will be interpreted as follows:
 *
 * If the user accesses http://example.com/?q=examples/page_example/simple,
 * the menu system will first look for a menu item with that path. In this case
 * it will find a match, and execute page_example_simple().
 *
 * If the user accesses http://example.com/?q=examples/page_example/arguments,
 * the menu system will find no explicit match, and will fall back to the
 * closest match, 'examples/page_example', executing page_example_description().
 *
 * If the user accesses
 * http://example.com/?q=examples/page_example/arguments/1/2, the menu
 * system will first look for examples/page_example/arguments/1/2. Not finding
 * a match, it will look for examples/page_example/arguments/1/%. Again not
 * finding a match, it will look for examples/page_example/arguments/%/2.
 * Yet again not finding a match, it will look for
 * examples/page_example/arguments/%/%. This time it finds a match, and so will
 * execute page_example_arguments(1, 2). Since the parameters are passed to
 * the function after the match, the function can do additional checking or
 * make use of them before executing the callback function.
 *
 * @see hook_menu()
 * @see menu_example
 */
function coel_import_menu() {

  // This is the minimum information you can provide for a menu item. This menu
  // item will be created in the default menu, usually Navigation.
  $items['coel/import'] = array(
    'title' => 'ImportaciÃ³n de comprobantes',
    'page callback' => 'coel_import_files',
    'access callback' => TRUE,
    'expanded' => TRUE,
  );

  $items['coel/send'] = array(
    'title' => 'Enviar comprobantes por correo',
    'page callback' => 'coel_import_send',
    'access callback' => TRUE,
    'expanded' => TRUE
    //'access arguments' => array('access coel send'),
  );

  // By using the MENU_CALLBACK type, we can register the callback for this
  // path without the item appearing in the menu; the admin cannot enable the
  // item in the menu, either.
  //
  // Notice that 'page arguments' is an array of numbers. These will be
  // replaced with the corresponding parts of the menu path. In this case a 0
  // would be replaced by 'examples', a 1 by 'page_example', and a 2 by
  // 'arguments.' 3 and 4 will be replaced by whatever the user provides.
  // These will be passed as arguments to the page_example_arguments() function.
  $items['coel/send/%'] = array(
    'page callback' => 'coel_import_send_mail',
    'page arguments' => array(2),
    'access arguments' => array('access arguments page'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Constructs a descriptive page.
 *
 * Our menu maps this function to the path 'examples/page_example'.
 */
function coel_import_files() {


  if (!isset($_POST["periodo"])) {
    return array(
      '#markup' => '<p>Por favor seleccione el archivo a importar ('.variable_get('file_public_path', conf_path() . '/files').')</p>
          <form action="" method="post" enctype="multipart/form-data">
            <label>Periodo: <input type="text" required size="60" name="periodo" placeholder="Digite el periodo de los comprobantes que se va a cargar"></label><br>
            <label>Archivo: <input type="file" required name="archivo" ></label>
            <input type="submit" value="Subir archivo">
          </form>
    ');
  }
  else {
    $uploads_dir = variable_get('file_public_path', conf_path() . '/files');
    $tmp_name = $_FILES["archivo"]["tmp_name"];
    $name = 'comp-'.date('YmdHis').'.xlsx';
    $filename = "$uploads_dir/$name";
    move_uploaded_file($tmp_name, $filename);

    // Parsing files
    // If you need to parse XLS files, include php-excel-reader
    require('spreadsheet-reader-0.5.11/php-excel-reader/excel_reader2.php');

    require('spreadsheet-reader-0.5.11/SpreadsheetReader.php');

    $Reader = new SpreadsheetReader($filename);
    $Reader->ChangeSheet(0);
    $first_line = true;

    // Registrando periodo en la base de datos
    $query = db_query('insert into coel_periodo SET nombre = :nombre',array(':nombre'=>$_POST['periodo']));


      $last_insert_id = Database::getConnection()->lastInsertId();


    foreach ($Reader as $row)
    {
      if ($first_line) {
        $first_line = false;
        continue;
      }

        //echo '<pre>'.print_r($row,true).'</pre>';


        // Mapeando campos
        $map = array(
            ':coel_periodo_id' => $last_insert_id,
            ':primer_apellido' => $row[1],
            ':segundo_apellido' => $row[2],
            ':nombre' => $row[3],
            ':cedula' => $row[4],
            ':correo_electronico' => $row[5],
            ':salario_base_quincenal' => $row[6],
            ':dias_laborados' => $row[7],
            ':total_salario' => $row[8],
            ':ccss' => $row[10],
            ':prestamo' => $row[11],
            ':adelanto_salario' => $row[12],
            ':embargos' => $row[13],
            ':total_pagado' => $row[14],
            ':tipo_comprobante' => 1,
            ':estado' => 1
        );  // $map

        $sql = 'INSERT INTO coel_periodo_detalle SET
          coel_periodo_id = :coel_periodo_id,
          primer_apellido = :primer_apellido,
          segundo_apellido = :segundo_apellido,
          nombre = :nombre,
          cedula = :cedula,
          correo_electronico = :correo_electronico,
          salario_base_quincenal = :salario_base_quincenal,
          dias_laborados = :dias_laborados,
          total_salario = :total_salario,
          ccss = :ccss,
          prestamo = :prestamo,
          adelanto_salario = :adelanto_salario,
          embargos = :embargos,
          total_pagado = :total_pagado,

          tipo_comprobante = :tipo_comprobante,
          estado = :estado';

        $query = db_query($sql,$map);



      //print_r($row);
    }

      // Leyendo la segunda hoja de calculo
      $Reader->ChangeSheet(1);
      foreach ($Reader as $row)
      {
          if ($first_line) {
              $first_line = false;
              continue;
          }

          //echo '<pre>Segunda: '.print_r($row,true).'</pre>';

          // Mapeando campos
          $map = array(
              ':coel_periodo_id' => $last_insert_id,
              ':primer_apellido' => $row[1],
              ':segundo_apellido' => $row[2],
              ':nombre' => $row[3],
              ':cedula' => $row[4],
              ':correo_electronico' => $row[5],
              ':salario_base_quincenal' => $row[6],
              ':horas_extra' => $row[7],
              ':feriados' => $row[8],
              ':ccss_extraordinario' => $row[10],
              ':total_pagado_extraordinario' => $row[11],
              /*':dias_laborados' => $row[7],
              ':total_salario' => $row[8],
              ':ccss' => $row[10],
              ':prestamo' => $row[11],
              ':adelanto_salario' => $row[12],
              ':embargos' => $row[13],
              ':total_pagado' => $row[14],*/
              ':tipo_comprobante' => 2,
              ':estado' => 1
          );  // $map

          $sql = 'UPDATE coel_periodo_detalle SET
          coel_periodo_id = :coel_periodo_id,
          primer_apellido = :primer_apellido,
          segundo_apellido = :segundo_apellido,
          nombre = :nombre,
          cedula = :cedula,
          correo_electronico = :correo_electronico,
          salario_base_quincenal = :salario_base_quincenal,
          '.
              /*dias_laborados = :dias_laborados,
          total_salario = :total_salario,
          ccss = :ccss,
          prestamo = :prestamo,
          adelanto_salario = :adelanto_salario,
          embargos = :embargos,
          total_pagado = :total_pagado,
              */
          'horas_extra = :horas_extra,
          feriados = :feriados,
          ccss_extraordinario = :ccss_extraordinario,
          total_pagado_extraordinario = :total_pagado_extraordinario,

          tipo_comprobante = :tipo_comprobante,
          estado = :estado
          WHERE cedula = :cedula';

          $query = db_query($sql,$map);


          //print_r($ow);
      }

    return array(
      '#markup' => '<p>El archivo ha sido cargado correctamente</p>'
    );
  }
}

/**
 * Constructs a simple page.
 *
 * The simple page callback, mapped to the path 'examples/page_example/simple'.
 *
 * Page callbacks return a renderable array with the content area of the page.
 * The theme system will later render and surround the content in the
 * appropriate blocks, navigation, and styling.
 *
 * If you do not want to use the theme system (for example for outputting an
 * image or XML), you should print the content yourself and not return anything.
 */
function coel_import_send() {
    // We are going to output the results in a table with a nice header.
    $header = array(
        // The header gives the table the information it needs in order to make
        // the query calls for ordering. TableSort uses the field information
        // to know what database column to sort by.
        array('data' => t('ID'), 'field' => 't.id_periodo'),
        array('data' => t('Nombre'), 'field' => 't.nombre'),
        array('data' => t('Opciones')),
    );

    // Using the TableSort Extender is what tells the query object that we are
    // sorting.
    $query = db_select('coel_periodo', 't')
        ->extend('TableSort');
    $query->fields('t');

    // Don't forget to tell the query object how to find the header information.
    $result = $query
        ->orderByHeader($header)
        ->execute();

    $rows = array();
    foreach ($result as $row) {
        // Normally we would add some nice formatting to our rows
        // but for our purpose we are simply going to add our row
        // to the array.
        $row->opciones = '<a href="/coel/send/'.$row->id_periodo.'">Enviar</a>';
        //echo '<pre>'.print_r($row,true).'</pre>';
        //exit;
        //$row['opciones'] = 'Enviar';
        $rows[] = array('data' => (array) $row);
    }

    // Build the table for the nice output.
    $build['tablesort_table'] = array(
        '#theme' => 'table',
        '#header' => $header,
        '#rows' => $rows,
    );

    return $build;
  //return array('#markup' => '<p>' . t('Listado de periodos.') . '</p>');
}

/**
 * A more complex page callback that takes arguments.
 *
 * This callback is mapped to the path 'examples/page_example/arguments/%/%'.
 *
 * The % arguments are passed in from the page URL. In our hook_menu
 * implementation we instructed the menu system to extract the last two
 * parameters of the path and pass them to this function as arguments.
 *
 * This function also demonstrates a more complex render array in the returned
 * values. Instead of just rendering the HTML with a theme('item_list'), the
 * list is left unrendered, and a #theme attached to it so that it can be
 * rendered as late as possible, giving more parts of the system a chance to
 * change it if necessary.
 *
 * Consult @link http://drupal.org/node/930760 Render Arrays documentation
 * @endlink for details.
 */
function coel_import_send_mail($id_periodo) {
  // Make sure you don't trust the URL to be safe! Always check for exploits.
  if (!is_numeric($id_periodo)) {
    // We will just show a standard "access denied" page in this case.
    drupal_access_denied();
    // We actually don't get here.
    return;
  }

  return array('#markup' => "<h2>Enviando email</h2>");
}
/**
 * @} End of "defgroup page_example".
 */
